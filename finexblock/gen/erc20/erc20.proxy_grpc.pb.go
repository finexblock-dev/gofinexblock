// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.23.4
// source: proto/erc20/erc20.proxy.proto

package erc20

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Erc20Proxy_GetCurrentBlockNumber_FullMethodName = "/erc20.Erc20Proxy/GetCurrentBlockNumber"
	Erc20Proxy_GetBlocks_FullMethodName             = "/erc20.Erc20Proxy/GetBlocks"
	Erc20Proxy_GetReceipt_FullMethodName            = "/erc20.Erc20Proxy/GetReceipt"
	Erc20Proxy_CreateWallet_FullMethodName          = "/erc20.Erc20Proxy/CreateWallet"
	Erc20Proxy_GetBalance_FullMethodName            = "/erc20.Erc20Proxy/GetBalance"
	Erc20Proxy_Transfer_FullMethodName              = "/erc20.Erc20Proxy/Transfer"
)

// Erc20ProxyClient is the client API for Erc20Proxy service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type Erc20ProxyClient interface {
	GetCurrentBlockNumber(ctx context.Context, in *GetCurrentBlockNumberInput, opts ...grpc.CallOption) (*GetCurrentBlockNumberOutput, error)
	GetBlocks(ctx context.Context, in *GetBlocksInput, opts ...grpc.CallOption) (*GetBlocksOutput, error)
	GetReceipt(ctx context.Context, in *GetReceiptInput, opts ...grpc.CallOption) (*GetReceiptOutput, error)
	CreateWallet(ctx context.Context, in *CreateWalletInput, opts ...grpc.CallOption) (*CreateWalletOutput, error)
	GetBalance(ctx context.Context, in *GetBalanceInput, opts ...grpc.CallOption) (*GetBalanceOutput, error)
	Transfer(ctx context.Context, in *TransferInput, opts ...grpc.CallOption) (*TransferOutput, error)
}

type erc20ProxyClient struct {
	cc grpc.ClientConnInterface
}

func NewErc20ProxyClient(cc grpc.ClientConnInterface) Erc20ProxyClient {
	return &erc20ProxyClient{cc}
}

func (c *erc20ProxyClient) GetCurrentBlockNumber(ctx context.Context, in *GetCurrentBlockNumberInput, opts ...grpc.CallOption) (*GetCurrentBlockNumberOutput, error) {
	out := new(GetCurrentBlockNumberOutput)
	err := c.cc.Invoke(ctx, Erc20Proxy_GetCurrentBlockNumber_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *erc20ProxyClient) GetBlocks(ctx context.Context, in *GetBlocksInput, opts ...grpc.CallOption) (*GetBlocksOutput, error) {
	out := new(GetBlocksOutput)
	err := c.cc.Invoke(ctx, Erc20Proxy_GetBlocks_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *erc20ProxyClient) GetReceipt(ctx context.Context, in *GetReceiptInput, opts ...grpc.CallOption) (*GetReceiptOutput, error) {
	out := new(GetReceiptOutput)
	err := c.cc.Invoke(ctx, Erc20Proxy_GetReceipt_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *erc20ProxyClient) CreateWallet(ctx context.Context, in *CreateWalletInput, opts ...grpc.CallOption) (*CreateWalletOutput, error) {
	out := new(CreateWalletOutput)
	err := c.cc.Invoke(ctx, Erc20Proxy_CreateWallet_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *erc20ProxyClient) GetBalance(ctx context.Context, in *GetBalanceInput, opts ...grpc.CallOption) (*GetBalanceOutput, error) {
	out := new(GetBalanceOutput)
	err := c.cc.Invoke(ctx, Erc20Proxy_GetBalance_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *erc20ProxyClient) Transfer(ctx context.Context, in *TransferInput, opts ...grpc.CallOption) (*TransferOutput, error) {
	out := new(TransferOutput)
	err := c.cc.Invoke(ctx, Erc20Proxy_Transfer_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Erc20ProxyServer is the server API for Erc20Proxy service.
// All implementations must embed UnimplementedErc20ProxyServer
// for forward compatibility
type Erc20ProxyServer interface {
	GetCurrentBlockNumber(context.Context, *GetCurrentBlockNumberInput) (*GetCurrentBlockNumberOutput, error)
	GetBlocks(context.Context, *GetBlocksInput) (*GetBlocksOutput, error)
	GetReceipt(context.Context, *GetReceiptInput) (*GetReceiptOutput, error)
	CreateWallet(context.Context, *CreateWalletInput) (*CreateWalletOutput, error)
	GetBalance(context.Context, *GetBalanceInput) (*GetBalanceOutput, error)
	Transfer(context.Context, *TransferInput) (*TransferOutput, error)
	mustEmbedUnimplementedErc20ProxyServer()
}

// UnimplementedErc20ProxyServer must be embedded to have forward compatible implementations.
type UnimplementedErc20ProxyServer struct {
}

func (UnimplementedErc20ProxyServer) GetCurrentBlockNumber(context.Context, *GetCurrentBlockNumberInput) (*GetCurrentBlockNumberOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCurrentBlockNumber not implemented")
}
func (UnimplementedErc20ProxyServer) GetBlocks(context.Context, *GetBlocksInput) (*GetBlocksOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBlocks not implemented")
}
func (UnimplementedErc20ProxyServer) GetReceipt(context.Context, *GetReceiptInput) (*GetReceiptOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetReceipt not implemented")
}
func (UnimplementedErc20ProxyServer) CreateWallet(context.Context, *CreateWalletInput) (*CreateWalletOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateWallet not implemented")
}
func (UnimplementedErc20ProxyServer) GetBalance(context.Context, *GetBalanceInput) (*GetBalanceOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBalance not implemented")
}
func (UnimplementedErc20ProxyServer) Transfer(context.Context, *TransferInput) (*TransferOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Transfer not implemented")
}
func (UnimplementedErc20ProxyServer) mustEmbedUnimplementedErc20ProxyServer() {}

// UnsafeErc20ProxyServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to Erc20ProxyServer will
// result in compilation errors.
type UnsafeErc20ProxyServer interface {
	mustEmbedUnimplementedErc20ProxyServer()
}

func RegisterErc20ProxyServer(s grpc.ServiceRegistrar, srv Erc20ProxyServer) {
	s.RegisterService(&Erc20Proxy_ServiceDesc, srv)
}

func _Erc20Proxy_GetCurrentBlockNumber_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCurrentBlockNumberInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(Erc20ProxyServer).GetCurrentBlockNumber(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Erc20Proxy_GetCurrentBlockNumber_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(Erc20ProxyServer).GetCurrentBlockNumber(ctx, req.(*GetCurrentBlockNumberInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _Erc20Proxy_GetBlocks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBlocksInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(Erc20ProxyServer).GetBlocks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Erc20Proxy_GetBlocks_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(Erc20ProxyServer).GetBlocks(ctx, req.(*GetBlocksInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _Erc20Proxy_GetReceipt_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetReceiptInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(Erc20ProxyServer).GetReceipt(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Erc20Proxy_GetReceipt_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(Erc20ProxyServer).GetReceipt(ctx, req.(*GetReceiptInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _Erc20Proxy_CreateWallet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateWalletInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(Erc20ProxyServer).CreateWallet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Erc20Proxy_CreateWallet_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(Erc20ProxyServer).CreateWallet(ctx, req.(*CreateWalletInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _Erc20Proxy_GetBalance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBalanceInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(Erc20ProxyServer).GetBalance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Erc20Proxy_GetBalance_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(Erc20ProxyServer).GetBalance(ctx, req.(*GetBalanceInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _Erc20Proxy_Transfer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TransferInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(Erc20ProxyServer).Transfer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Erc20Proxy_Transfer_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(Erc20ProxyServer).Transfer(ctx, req.(*TransferInput))
	}
	return interceptor(ctx, in, info, handler)
}

// Erc20Proxy_ServiceDesc is the grpc.ServiceDesc for Erc20Proxy service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Erc20Proxy_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "erc20.Erc20Proxy",
	HandlerType: (*Erc20ProxyServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetCurrentBlockNumber",
			Handler:    _Erc20Proxy_GetCurrentBlockNumber_Handler,
		},
		{
			MethodName: "GetBlocks",
			Handler:    _Erc20Proxy_GetBlocks_Handler,
		},
		{
			MethodName: "GetReceipt",
			Handler:    _Erc20Proxy_GetReceipt_Handler,
		},
		{
			MethodName: "CreateWallet",
			Handler:    _Erc20Proxy_CreateWallet_Handler,
		},
		{
			MethodName: "GetBalance",
			Handler:    _Erc20Proxy_GetBalance_Handler,
		},
		{
			MethodName: "Transfer",
			Handler:    _Erc20Proxy_Transfer_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/erc20/erc20.proxy.proto",
}
