// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.23.3
// source: proto/proxy/proxy.ethereum.proto

package ethereum_proxy

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	EthereumProxy_GetReceipt_FullMethodName      = "/ethereum_proxy.EthereumProxy/GetReceipt"
	EthereumProxy_SendTransaction_FullMethodName = "/ethereum_proxy.EthereumProxy/SendTransaction"
	EthereumProxy_Transfer_FullMethodName        = "/ethereum_proxy.EthereumProxy/Transfer"
	EthereumProxy_GetBlockNumber_FullMethodName  = "/ethereum_proxy.EthereumProxy/GetBlockNumber"
	EthereumProxy_GetBlocks_FullMethodName       = "/ethereum_proxy.EthereumProxy/GetBlocks"
	EthereumProxy_CreateWallet_FullMethodName    = "/ethereum_proxy.EthereumProxy/CreateWallet"
	EthereumProxy_GetBalance_FullMethodName      = "/ethereum_proxy.EthereumProxy/GetBalance"
)

// EthereumProxyClient is the client API for EthereumProxy service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type EthereumProxyClient interface {
	GetReceipt(ctx context.Context, in *GetReceiptInput, opts ...grpc.CallOption) (*GetReceiptOutput, error)
	SendTransaction(ctx context.Context, in *SendTransactionInput, opts ...grpc.CallOption) (*SendTransactionOutput, error)
	Transfer(ctx context.Context, in *TransferInput, opts ...grpc.CallOption) (*TransferOutput, error)
	GetBlockNumber(ctx context.Context, in *GetBlockNumberInput, opts ...grpc.CallOption) (*GetBlockNumberOutput, error)
	GetBlocks(ctx context.Context, in *GetBlocksInput, opts ...grpc.CallOption) (*GetBlocksOutput, error)
	CreateWallet(ctx context.Context, in *CreateWalletInput, opts ...grpc.CallOption) (*CreateWalletOutput, error)
	GetBalance(ctx context.Context, in *GetBalanceInput, opts ...grpc.CallOption) (*GetBalanceOutput, error)
}

type ethereumProxyClient struct {
	cc grpc.ClientConnInterface
}

func NewEthereumProxyClient(cc grpc.ClientConnInterface) EthereumProxyClient {
	return &ethereumProxyClient{cc}
}

func (c *ethereumProxyClient) GetReceipt(ctx context.Context, in *GetReceiptInput, opts ...grpc.CallOption) (*GetReceiptOutput, error) {
	out := new(GetReceiptOutput)
	err := c.cc.Invoke(ctx, EthereumProxy_GetReceipt_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ethereumProxyClient) SendTransaction(ctx context.Context, in *SendTransactionInput, opts ...grpc.CallOption) (*SendTransactionOutput, error) {
	out := new(SendTransactionOutput)
	err := c.cc.Invoke(ctx, EthereumProxy_SendTransaction_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ethereumProxyClient) Transfer(ctx context.Context, in *TransferInput, opts ...grpc.CallOption) (*TransferOutput, error) {
	out := new(TransferOutput)
	err := c.cc.Invoke(ctx, EthereumProxy_Transfer_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ethereumProxyClient) GetBlockNumber(ctx context.Context, in *GetBlockNumberInput, opts ...grpc.CallOption) (*GetBlockNumberOutput, error) {
	out := new(GetBlockNumberOutput)
	err := c.cc.Invoke(ctx, EthereumProxy_GetBlockNumber_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ethereumProxyClient) GetBlocks(ctx context.Context, in *GetBlocksInput, opts ...grpc.CallOption) (*GetBlocksOutput, error) {
	out := new(GetBlocksOutput)
	err := c.cc.Invoke(ctx, EthereumProxy_GetBlocks_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ethereumProxyClient) CreateWallet(ctx context.Context, in *CreateWalletInput, opts ...grpc.CallOption) (*CreateWalletOutput, error) {
	out := new(CreateWalletOutput)
	err := c.cc.Invoke(ctx, EthereumProxy_CreateWallet_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ethereumProxyClient) GetBalance(ctx context.Context, in *GetBalanceInput, opts ...grpc.CallOption) (*GetBalanceOutput, error) {
	out := new(GetBalanceOutput)
	err := c.cc.Invoke(ctx, EthereumProxy_GetBalance_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// EthereumProxyServer is the server API for EthereumProxy service.
// All implementations must embed UnimplementedEthereumProxyServer
// for forward compatibility
type EthereumProxyServer interface {
	GetReceipt(context.Context, *GetReceiptInput) (*GetReceiptOutput, error)
	SendTransaction(context.Context, *SendTransactionInput) (*SendTransactionOutput, error)
	Transfer(context.Context, *TransferInput) (*TransferOutput, error)
	GetBlockNumber(context.Context, *GetBlockNumberInput) (*GetBlockNumberOutput, error)
	GetBlocks(context.Context, *GetBlocksInput) (*GetBlocksOutput, error)
	CreateWallet(context.Context, *CreateWalletInput) (*CreateWalletOutput, error)
	GetBalance(context.Context, *GetBalanceInput) (*GetBalanceOutput, error)
	mustEmbedUnimplementedEthereumProxyServer()
}

// UnimplementedEthereumProxyServer must be embedded to have forward compatible implementations.
type UnimplementedEthereumProxyServer struct {
}

func (UnimplementedEthereumProxyServer) GetReceipt(context.Context, *GetReceiptInput) (*GetReceiptOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetReceipt not implemented")
}
func (UnimplementedEthereumProxyServer) SendTransaction(context.Context, *SendTransactionInput) (*SendTransactionOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendTransaction not implemented")
}
func (UnimplementedEthereumProxyServer) Transfer(context.Context, *TransferInput) (*TransferOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Transfer not implemented")
}
func (UnimplementedEthereumProxyServer) GetBlockNumber(context.Context, *GetBlockNumberInput) (*GetBlockNumberOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBlockNumber not implemented")
}
func (UnimplementedEthereumProxyServer) GetBlocks(context.Context, *GetBlocksInput) (*GetBlocksOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBlocks not implemented")
}
func (UnimplementedEthereumProxyServer) CreateWallet(context.Context, *CreateWalletInput) (*CreateWalletOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateWallet not implemented")
}
func (UnimplementedEthereumProxyServer) GetBalance(context.Context, *GetBalanceInput) (*GetBalanceOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBalance not implemented")
}
func (UnimplementedEthereumProxyServer) mustEmbedUnimplementedEthereumProxyServer() {}

// UnsafeEthereumProxyServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to EthereumProxyServer will
// result in compilation errors.
type UnsafeEthereumProxyServer interface {
	mustEmbedUnimplementedEthereumProxyServer()
}

func RegisterEthereumProxyServer(s grpc.ServiceRegistrar, srv EthereumProxyServer) {
	s.RegisterService(&EthereumProxy_ServiceDesc, srv)
}

func _EthereumProxy_GetReceipt_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetReceiptInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EthereumProxyServer).GetReceipt(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EthereumProxy_GetReceipt_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EthereumProxyServer).GetReceipt(ctx, req.(*GetReceiptInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _EthereumProxy_SendTransaction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendTransactionInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EthereumProxyServer).SendTransaction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EthereumProxy_SendTransaction_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EthereumProxyServer).SendTransaction(ctx, req.(*SendTransactionInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _EthereumProxy_Transfer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TransferInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EthereumProxyServer).Transfer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EthereumProxy_Transfer_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EthereumProxyServer).Transfer(ctx, req.(*TransferInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _EthereumProxy_GetBlockNumber_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBlockNumberInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EthereumProxyServer).GetBlockNumber(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EthereumProxy_GetBlockNumber_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EthereumProxyServer).GetBlockNumber(ctx, req.(*GetBlockNumberInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _EthereumProxy_GetBlocks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBlocksInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EthereumProxyServer).GetBlocks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EthereumProxy_GetBlocks_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EthereumProxyServer).GetBlocks(ctx, req.(*GetBlocksInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _EthereumProxy_CreateWallet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateWalletInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EthereumProxyServer).CreateWallet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EthereumProxy_CreateWallet_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EthereumProxyServer).CreateWallet(ctx, req.(*CreateWalletInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _EthereumProxy_GetBalance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBalanceInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EthereumProxyServer).GetBalance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EthereumProxy_GetBalance_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EthereumProxyServer).GetBalance(ctx, req.(*GetBalanceInput))
	}
	return interceptor(ctx, in, info, handler)
}

// EthereumProxy_ServiceDesc is the grpc.ServiceDesc for EthereumProxy service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var EthereumProxy_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "ethereum_proxy.EthereumProxy",
	HandlerType: (*EthereumProxyServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetReceipt",
			Handler:    _EthereumProxy_GetReceipt_Handler,
		},
		{
			MethodName: "SendTransaction",
			Handler:    _EthereumProxy_SendTransaction_Handler,
		},
		{
			MethodName: "Transfer",
			Handler:    _EthereumProxy_Transfer_Handler,
		},
		{
			MethodName: "GetBlockNumber",
			Handler:    _EthereumProxy_GetBlockNumber_Handler,
		},
		{
			MethodName: "GetBlocks",
			Handler:    _EthereumProxy_GetBlocks_Handler,
		},
		{
			MethodName: "CreateWallet",
			Handler:    _EthereumProxy_CreateWallet_Handler,
		},
		{
			MethodName: "GetBalance",
			Handler:    _EthereumProxy_GetBalance_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/proxy/proxy.ethereum.proto",
}
