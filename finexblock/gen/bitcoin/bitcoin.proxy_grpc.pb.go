// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.23.3
// source: proto/bitcoin/bitcoin.proxy.proto

package bitcoin

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	BitcoinProxy_GetRawTransaction_FullMethodName = "/bitcoin.BitcoinProxy/GetRawTransaction"
	BitcoinProxy_ListUnspent_FullMethodName       = "/bitcoin.BitcoinProxy/ListUnspent"
	BitcoinProxy_SendToAddress_FullMethodName     = "/bitcoin.BitcoinProxy/SendToAddress"
	BitcoinProxy_GetNewAddress_FullMethodName     = "/bitcoin.BitcoinProxy/GetNewAddress"
)

// BitcoinProxyClient is the client API for BitcoinProxy service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BitcoinProxyClient interface {
	GetRawTransaction(ctx context.Context, in *GetRawTransactionInput, opts ...grpc.CallOption) (*GetRawTransactionOutput, error)
	ListUnspent(ctx context.Context, in *ListUnspentInput, opts ...grpc.CallOption) (*ListUnspentOutput, error)
	SendToAddress(ctx context.Context, in *SendToAddressInput, opts ...grpc.CallOption) (*SendToAddressOutput, error)
	GetNewAddress(ctx context.Context, in *GetNewAddressInput, opts ...grpc.CallOption) (*GetNewAddressOutput, error)
}

type bitcoinProxyClient struct {
	cc grpc.ClientConnInterface
}

func NewBitcoinProxyClient(cc grpc.ClientConnInterface) BitcoinProxyClient {
	return &bitcoinProxyClient{cc}
}

func (c *bitcoinProxyClient) GetRawTransaction(ctx context.Context, in *GetRawTransactionInput, opts ...grpc.CallOption) (*GetRawTransactionOutput, error) {
	out := new(GetRawTransactionOutput)
	err := c.cc.Invoke(ctx, BitcoinProxy_GetRawTransaction_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bitcoinProxyClient) ListUnspent(ctx context.Context, in *ListUnspentInput, opts ...grpc.CallOption) (*ListUnspentOutput, error) {
	out := new(ListUnspentOutput)
	err := c.cc.Invoke(ctx, BitcoinProxy_ListUnspent_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bitcoinProxyClient) SendToAddress(ctx context.Context, in *SendToAddressInput, opts ...grpc.CallOption) (*SendToAddressOutput, error) {
	out := new(SendToAddressOutput)
	err := c.cc.Invoke(ctx, BitcoinProxy_SendToAddress_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bitcoinProxyClient) GetNewAddress(ctx context.Context, in *GetNewAddressInput, opts ...grpc.CallOption) (*GetNewAddressOutput, error) {
	out := new(GetNewAddressOutput)
	err := c.cc.Invoke(ctx, BitcoinProxy_GetNewAddress_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BitcoinProxyServer is the server API for BitcoinProxy service.
// All implementations must embed UnimplementedBitcoinProxyServer
// for forward compatibility
type BitcoinProxyServer interface {
	GetRawTransaction(context.Context, *GetRawTransactionInput) (*GetRawTransactionOutput, error)
	ListUnspent(context.Context, *ListUnspentInput) (*ListUnspentOutput, error)
	SendToAddress(context.Context, *SendToAddressInput) (*SendToAddressOutput, error)
	GetNewAddress(context.Context, *GetNewAddressInput) (*GetNewAddressOutput, error)
	mustEmbedUnimplementedBitcoinProxyServer()
}

// UnimplementedBitcoinProxyServer must be embedded to have forward compatible implementations.
type UnimplementedBitcoinProxyServer struct {
}

func (UnimplementedBitcoinProxyServer) GetRawTransaction(context.Context, *GetRawTransactionInput) (*GetRawTransactionOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRawTransaction not implemented")
}
func (UnimplementedBitcoinProxyServer) ListUnspent(context.Context, *ListUnspentInput) (*ListUnspentOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListUnspent not implemented")
}
func (UnimplementedBitcoinProxyServer) SendToAddress(context.Context, *SendToAddressInput) (*SendToAddressOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendToAddress not implemented")
}
func (UnimplementedBitcoinProxyServer) GetNewAddress(context.Context, *GetNewAddressInput) (*GetNewAddressOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNewAddress not implemented")
}
func (UnimplementedBitcoinProxyServer) mustEmbedUnimplementedBitcoinProxyServer() {}

// UnsafeBitcoinProxyServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BitcoinProxyServer will
// result in compilation errors.
type UnsafeBitcoinProxyServer interface {
	mustEmbedUnimplementedBitcoinProxyServer()
}

func RegisterBitcoinProxyServer(s grpc.ServiceRegistrar, srv BitcoinProxyServer) {
	s.RegisterService(&BitcoinProxy_ServiceDesc, srv)
}

func _BitcoinProxy_GetRawTransaction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRawTransactionInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BitcoinProxyServer).GetRawTransaction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BitcoinProxy_GetRawTransaction_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BitcoinProxyServer).GetRawTransaction(ctx, req.(*GetRawTransactionInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _BitcoinProxy_ListUnspent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListUnspentInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BitcoinProxyServer).ListUnspent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BitcoinProxy_ListUnspent_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BitcoinProxyServer).ListUnspent(ctx, req.(*ListUnspentInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _BitcoinProxy_SendToAddress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendToAddressInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BitcoinProxyServer).SendToAddress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BitcoinProxy_SendToAddress_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BitcoinProxyServer).SendToAddress(ctx, req.(*SendToAddressInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _BitcoinProxy_GetNewAddress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetNewAddressInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BitcoinProxyServer).GetNewAddress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BitcoinProxy_GetNewAddress_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BitcoinProxyServer).GetNewAddress(ctx, req.(*GetNewAddressInput))
	}
	return interceptor(ctx, in, info, handler)
}

// BitcoinProxy_ServiceDesc is the grpc.ServiceDesc for BitcoinProxy service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var BitcoinProxy_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "bitcoin.BitcoinProxy",
	HandlerType: (*BitcoinProxyServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetRawTransaction",
			Handler:    _BitcoinProxy_GetRawTransaction_Handler,
		},
		{
			MethodName: "ListUnspent",
			Handler:    _BitcoinProxy_ListUnspent_Handler,
		},
		{
			MethodName: "SendToAddress",
			Handler:    _BitcoinProxy_SendToAddress_Handler,
		},
		{
			MethodName: "GetNewAddress",
			Handler:    _BitcoinProxy_GetNewAddress_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/bitcoin/bitcoin.proxy.proto",
}
