// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.23.3
// source: proto/bitcoin/hdwallet.proto

package bitcoin

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	HDWallet_CreateWalletAddress_FullMethodName = "/bitcoin.HDWallet/CreateWalletAddress"
	HDWallet_GetNewAddress_FullMethodName       = "/bitcoin.HDWallet/GetNewAddress"
	HDWallet_GetPrivateKey_FullMethodName       = "/bitcoin.HDWallet/GetPrivateKey"
	HDWallet_GetPubKeyHash_FullMethodName       = "/bitcoin.HDWallet/GetPubKeyHash"
	HDWallet_GetAddressUTXO_FullMethodName      = "/bitcoin.HDWallet/GetAddressUTXO"
	HDWallet_ListUnspent_FullMethodName         = "/bitcoin.HDWallet/ListUnspent"
	HDWallet_SendToAddress_FullMethodName       = "/bitcoin.HDWallet/SendToAddress"
)

// HDWalletClient is the client API for HDWallet service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type HDWalletClient interface {
	CreateWalletAddress(ctx context.Context, in *CreateWalletRequest, opts ...grpc.CallOption) (*CreateWalletResponse, error)
	GetNewAddress(ctx context.Context, in *GetNewAddressRequest, opts ...grpc.CallOption) (*GetNewAddressResponse, error)
	GetPrivateKey(ctx context.Context, in *GetPrivateKeyRequest, opts ...grpc.CallOption) (*GetPrivateKeyResponse, error)
	GetPubKeyHash(ctx context.Context, in *GetPubKeyHashRequest, opts ...grpc.CallOption) (*GetPubKeyHashResponse, error)
	GetAddressUTXO(ctx context.Context, in *GetAddressUTXORequest, opts ...grpc.CallOption) (*GetAddressUTXOResponse, error)
	ListUnspent(ctx context.Context, in *ListUnspentRequest, opts ...grpc.CallOption) (*ListUnspentResponse, error)
	SendToAddress(ctx context.Context, in *SendToAddressRequest, opts ...grpc.CallOption) (*SendToAddressResponse, error)
}

type hDWalletClient struct {
	cc grpc.ClientConnInterface
}

func NewHDWalletClient(cc grpc.ClientConnInterface) HDWalletClient {
	return &hDWalletClient{cc}
}

func (c *hDWalletClient) CreateWalletAddress(ctx context.Context, in *CreateWalletRequest, opts ...grpc.CallOption) (*CreateWalletResponse, error) {
	out := new(CreateWalletResponse)
	err := c.cc.Invoke(ctx, HDWallet_CreateWalletAddress_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hDWalletClient) GetNewAddress(ctx context.Context, in *GetNewAddressRequest, opts ...grpc.CallOption) (*GetNewAddressResponse, error) {
	out := new(GetNewAddressResponse)
	err := c.cc.Invoke(ctx, HDWallet_GetNewAddress_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hDWalletClient) GetPrivateKey(ctx context.Context, in *GetPrivateKeyRequest, opts ...grpc.CallOption) (*GetPrivateKeyResponse, error) {
	out := new(GetPrivateKeyResponse)
	err := c.cc.Invoke(ctx, HDWallet_GetPrivateKey_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hDWalletClient) GetPubKeyHash(ctx context.Context, in *GetPubKeyHashRequest, opts ...grpc.CallOption) (*GetPubKeyHashResponse, error) {
	out := new(GetPubKeyHashResponse)
	err := c.cc.Invoke(ctx, HDWallet_GetPubKeyHash_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hDWalletClient) GetAddressUTXO(ctx context.Context, in *GetAddressUTXORequest, opts ...grpc.CallOption) (*GetAddressUTXOResponse, error) {
	out := new(GetAddressUTXOResponse)
	err := c.cc.Invoke(ctx, HDWallet_GetAddressUTXO_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hDWalletClient) ListUnspent(ctx context.Context, in *ListUnspentRequest, opts ...grpc.CallOption) (*ListUnspentResponse, error) {
	out := new(ListUnspentResponse)
	err := c.cc.Invoke(ctx, HDWallet_ListUnspent_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hDWalletClient) SendToAddress(ctx context.Context, in *SendToAddressRequest, opts ...grpc.CallOption) (*SendToAddressResponse, error) {
	out := new(SendToAddressResponse)
	err := c.cc.Invoke(ctx, HDWallet_SendToAddress_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// HDWalletServer is the server API for HDWallet service.
// All implementations must embed UnimplementedHDWalletServer
// for forward compatibility
type HDWalletServer interface {
	CreateWalletAddress(context.Context, *CreateWalletRequest) (*CreateWalletResponse, error)
	GetNewAddress(context.Context, *GetNewAddressRequest) (*GetNewAddressResponse, error)
	GetPrivateKey(context.Context, *GetPrivateKeyRequest) (*GetPrivateKeyResponse, error)
	GetPubKeyHash(context.Context, *GetPubKeyHashRequest) (*GetPubKeyHashResponse, error)
	GetAddressUTXO(context.Context, *GetAddressUTXORequest) (*GetAddressUTXOResponse, error)
	ListUnspent(context.Context, *ListUnspentRequest) (*ListUnspentResponse, error)
	SendToAddress(context.Context, *SendToAddressRequest) (*SendToAddressResponse, error)
	mustEmbedUnimplementedHDWalletServer()
}

// UnimplementedHDWalletServer must be embedded to have forward compatible implementations.
type UnimplementedHDWalletServer struct {
}

func (UnimplementedHDWalletServer) CreateWalletAddress(context.Context, *CreateWalletRequest) (*CreateWalletResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateWalletAddress not implemented")
}
func (UnimplementedHDWalletServer) GetNewAddress(context.Context, *GetNewAddressRequest) (*GetNewAddressResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNewAddress not implemented")
}
func (UnimplementedHDWalletServer) GetPrivateKey(context.Context, *GetPrivateKeyRequest) (*GetPrivateKeyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPrivateKey not implemented")
}
func (UnimplementedHDWalletServer) GetPubKeyHash(context.Context, *GetPubKeyHashRequest) (*GetPubKeyHashResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPubKeyHash not implemented")
}
func (UnimplementedHDWalletServer) GetAddressUTXO(context.Context, *GetAddressUTXORequest) (*GetAddressUTXOResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAddressUTXO not implemented")
}
func (UnimplementedHDWalletServer) ListUnspent(context.Context, *ListUnspentRequest) (*ListUnspentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListUnspent not implemented")
}
func (UnimplementedHDWalletServer) SendToAddress(context.Context, *SendToAddressRequest) (*SendToAddressResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendToAddress not implemented")
}
func (UnimplementedHDWalletServer) mustEmbedUnimplementedHDWalletServer() {}

// UnsafeHDWalletServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to HDWalletServer will
// result in compilation errors.
type UnsafeHDWalletServer interface {
	mustEmbedUnimplementedHDWalletServer()
}

func RegisterHDWalletServer(s grpc.ServiceRegistrar, srv HDWalletServer) {
	s.RegisterService(&HDWallet_ServiceDesc, srv)
}

func _HDWallet_CreateWalletAddress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateWalletRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HDWalletServer).CreateWalletAddress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HDWallet_CreateWalletAddress_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HDWalletServer).CreateWalletAddress(ctx, req.(*CreateWalletRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HDWallet_GetNewAddress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetNewAddressRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HDWalletServer).GetNewAddress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HDWallet_GetNewAddress_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HDWalletServer).GetNewAddress(ctx, req.(*GetNewAddressRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HDWallet_GetPrivateKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPrivateKeyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HDWalletServer).GetPrivateKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HDWallet_GetPrivateKey_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HDWalletServer).GetPrivateKey(ctx, req.(*GetPrivateKeyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HDWallet_GetPubKeyHash_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPubKeyHashRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HDWalletServer).GetPubKeyHash(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HDWallet_GetPubKeyHash_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HDWalletServer).GetPubKeyHash(ctx, req.(*GetPubKeyHashRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HDWallet_GetAddressUTXO_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAddressUTXORequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HDWalletServer).GetAddressUTXO(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HDWallet_GetAddressUTXO_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HDWalletServer).GetAddressUTXO(ctx, req.(*GetAddressUTXORequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HDWallet_ListUnspent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListUnspentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HDWalletServer).ListUnspent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HDWallet_ListUnspent_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HDWalletServer).ListUnspent(ctx, req.(*ListUnspentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HDWallet_SendToAddress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendToAddressRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HDWalletServer).SendToAddress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HDWallet_SendToAddress_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HDWalletServer).SendToAddress(ctx, req.(*SendToAddressRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// HDWallet_ServiceDesc is the grpc.ServiceDesc for HDWallet service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var HDWallet_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "bitcoin.HDWallet",
	HandlerType: (*HDWalletServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateWalletAddress",
			Handler:    _HDWallet_CreateWalletAddress_Handler,
		},
		{
			MethodName: "GetNewAddress",
			Handler:    _HDWallet_GetNewAddress_Handler,
		},
		{
			MethodName: "GetPrivateKey",
			Handler:    _HDWallet_GetPrivateKey_Handler,
		},
		{
			MethodName: "GetPubKeyHash",
			Handler:    _HDWallet_GetPubKeyHash_Handler,
		},
		{
			MethodName: "GetAddressUTXO",
			Handler:    _HDWallet_GetAddressUTXO_Handler,
		},
		{
			MethodName: "ListUnspent",
			Handler:    _HDWallet_ListUnspent_Handler,
		},
		{
			MethodName: "SendToAddress",
			Handler:    _HDWallet_SendToAddress_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/bitcoin/hdwallet.proto",
}
