// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.23.3
// source: proto/proxy/proxy.proto

package proxy

import (
	bitcoin "./bitcoin"
	ethereum "./ethereum"
	polygon "./polygon"
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	BitcoinProxy_GetRawTransaction_FullMethodName = "/proxy.BitcoinProxy/GetRawTransaction"
	BitcoinProxy_ListUnspent_FullMethodName       = "/proxy.BitcoinProxy/ListUnspent"
	BitcoinProxy_SendToAddress_FullMethodName     = "/proxy.BitcoinProxy/SendToAddress"
	BitcoinProxy_GetNewAddress_FullMethodName     = "/proxy.BitcoinProxy/GetNewAddress"
)

// BitcoinProxyClient is the client API for BitcoinProxy service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BitcoinProxyClient interface {
	GetRawTransaction(ctx context.Context, in *bitcoin.GetRawTransactionInput, opts ...grpc.CallOption) (*bitcoin.GetRawTransactionOutput, error)
	ListUnspent(ctx context.Context, in *bitcoin.ListUnspentInput, opts ...grpc.CallOption) (*bitcoin.ListUnspentOutput, error)
	SendToAddress(ctx context.Context, in *bitcoin.SendToAddressInput, opts ...grpc.CallOption) (*bitcoin.SendToAddressOutput, error)
	GetNewAddress(ctx context.Context, in *bitcoin.GetNewAddressInput, opts ...grpc.CallOption) (*bitcoin.GetNewAddressOutput, error)
}

type bitcoinProxyClient struct {
	cc grpc.ClientConnInterface
}

func NewBitcoinProxyClient(cc grpc.ClientConnInterface) BitcoinProxyClient {
	return &bitcoinProxyClient{cc}
}

func (c *bitcoinProxyClient) GetRawTransaction(ctx context.Context, in *bitcoin.GetRawTransactionInput, opts ...grpc.CallOption) (*bitcoin.GetRawTransactionOutput, error) {
	out := new(bitcoin.GetRawTransactionOutput)
	err := c.cc.Invoke(ctx, BitcoinProxy_GetRawTransaction_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bitcoinProxyClient) ListUnspent(ctx context.Context, in *bitcoin.ListUnspentInput, opts ...grpc.CallOption) (*bitcoin.ListUnspentOutput, error) {
	out := new(bitcoin.ListUnspentOutput)
	err := c.cc.Invoke(ctx, BitcoinProxy_ListUnspent_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bitcoinProxyClient) SendToAddress(ctx context.Context, in *bitcoin.SendToAddressInput, opts ...grpc.CallOption) (*bitcoin.SendToAddressOutput, error) {
	out := new(bitcoin.SendToAddressOutput)
	err := c.cc.Invoke(ctx, BitcoinProxy_SendToAddress_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bitcoinProxyClient) GetNewAddress(ctx context.Context, in *bitcoin.GetNewAddressInput, opts ...grpc.CallOption) (*bitcoin.GetNewAddressOutput, error) {
	out := new(bitcoin.GetNewAddressOutput)
	err := c.cc.Invoke(ctx, BitcoinProxy_GetNewAddress_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BitcoinProxyServer is the server API for BitcoinProxy service.
// All implementations must embed UnimplementedBitcoinProxyServer
// for forward compatibility
type BitcoinProxyServer interface {
	GetRawTransaction(context.Context, *bitcoin.GetRawTransactionInput) (*bitcoin.GetRawTransactionOutput, error)
	ListUnspent(context.Context, *bitcoin.ListUnspentInput) (*bitcoin.ListUnspentOutput, error)
	SendToAddress(context.Context, *bitcoin.SendToAddressInput) (*bitcoin.SendToAddressOutput, error)
	GetNewAddress(context.Context, *bitcoin.GetNewAddressInput) (*bitcoin.GetNewAddressOutput, error)
	mustEmbedUnimplementedBitcoinProxyServer()
}

// UnimplementedBitcoinProxyServer must be embedded to have forward compatible implementations.
type UnimplementedBitcoinProxyServer struct {
}

func (UnimplementedBitcoinProxyServer) GetRawTransaction(context.Context, *bitcoin.GetRawTransactionInput) (*bitcoin.GetRawTransactionOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRawTransaction not implemented")
}
func (UnimplementedBitcoinProxyServer) ListUnspent(context.Context, *bitcoin.ListUnspentInput) (*bitcoin.ListUnspentOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListUnspent not implemented")
}
func (UnimplementedBitcoinProxyServer) SendToAddress(context.Context, *bitcoin.SendToAddressInput) (*bitcoin.SendToAddressOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendToAddress not implemented")
}
func (UnimplementedBitcoinProxyServer) GetNewAddress(context.Context, *bitcoin.GetNewAddressInput) (*bitcoin.GetNewAddressOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNewAddress not implemented")
}
func (UnimplementedBitcoinProxyServer) mustEmbedUnimplementedBitcoinProxyServer() {}

// UnsafeBitcoinProxyServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BitcoinProxyServer will
// result in compilation errors.
type UnsafeBitcoinProxyServer interface {
	mustEmbedUnimplementedBitcoinProxyServer()
}

func RegisterBitcoinProxyServer(s grpc.ServiceRegistrar, srv BitcoinProxyServer) {
	s.RegisterService(&BitcoinProxy_ServiceDesc, srv)
}

func _BitcoinProxy_GetRawTransaction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(bitcoin.GetRawTransactionInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BitcoinProxyServer).GetRawTransaction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BitcoinProxy_GetRawTransaction_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BitcoinProxyServer).GetRawTransaction(ctx, req.(*bitcoin.GetRawTransactionInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _BitcoinProxy_ListUnspent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(bitcoin.ListUnspentInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BitcoinProxyServer).ListUnspent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BitcoinProxy_ListUnspent_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BitcoinProxyServer).ListUnspent(ctx, req.(*bitcoin.ListUnspentInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _BitcoinProxy_SendToAddress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(bitcoin.SendToAddressInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BitcoinProxyServer).SendToAddress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BitcoinProxy_SendToAddress_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BitcoinProxyServer).SendToAddress(ctx, req.(*bitcoin.SendToAddressInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _BitcoinProxy_GetNewAddress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(bitcoin.GetNewAddressInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BitcoinProxyServer).GetNewAddress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BitcoinProxy_GetNewAddress_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BitcoinProxyServer).GetNewAddress(ctx, req.(*bitcoin.GetNewAddressInput))
	}
	return interceptor(ctx, in, info, handler)
}

// BitcoinProxy_ServiceDesc is the grpc.ServiceDesc for BitcoinProxy service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var BitcoinProxy_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proxy.BitcoinProxy",
	HandlerType: (*BitcoinProxyServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetRawTransaction",
			Handler:    _BitcoinProxy_GetRawTransaction_Handler,
		},
		{
			MethodName: "ListUnspent",
			Handler:    _BitcoinProxy_ListUnspent_Handler,
		},
		{
			MethodName: "SendToAddress",
			Handler:    _BitcoinProxy_SendToAddress_Handler,
		},
		{
			MethodName: "GetNewAddress",
			Handler:    _BitcoinProxy_GetNewAddress_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/proxy/proxy.proto",
}

const (
	PolygonProxy_CreateWallet_FullMethodName         = "/proxy.PolygonProxy/CreateWallet"
	PolygonProxy_GetBalance_FullMethodName           = "/proxy.PolygonProxy/GetBalance"
	PolygonProxy_GetReceipt_FullMethodName           = "/proxy.PolygonProxy/GetReceipt"
	PolygonProxy_SendRawTransaction_FullMethodName   = "/proxy.PolygonProxy/SendRawTransaction"
	PolygonProxy_CreateRawTransaction_FullMethodName = "/proxy.PolygonProxy/CreateRawTransaction"
	PolygonProxy_GetBlockNumber_FullMethodName       = "/proxy.PolygonProxy/GetBlockNumber"
	PolygonProxy_GetBlocks_FullMethodName            = "/proxy.PolygonProxy/GetBlocks"
)

// PolygonProxyClient is the client API for PolygonProxy service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PolygonProxyClient interface {
	CreateWallet(ctx context.Context, in *polygon.CreateWalletInput, opts ...grpc.CallOption) (*polygon.CreateWalletOutput, error)
	GetBalance(ctx context.Context, in *polygon.GetBalanceInput, opts ...grpc.CallOption) (*polygon.GetBalanceOutput, error)
	GetReceipt(ctx context.Context, in *polygon.GetReceiptInput, opts ...grpc.CallOption) (*polygon.GetReceiptOutput, error)
	SendRawTransaction(ctx context.Context, in *polygon.SendRawTransactionInput, opts ...grpc.CallOption) (*polygon.SendRawTransactionOutput, error)
	CreateRawTransaction(ctx context.Context, in *polygon.CreateRawTransactionInput, opts ...grpc.CallOption) (*polygon.CreateRawTransactionOutput, error)
	GetBlockNumber(ctx context.Context, in *polygon.GetBlockNumberInput, opts ...grpc.CallOption) (*polygon.GetBlockNumberOutput, error)
	GetBlocks(ctx context.Context, in *polygon.GetBlocksInput, opts ...grpc.CallOption) (*polygon.GetBlocksOutput, error)
}

type polygonProxyClient struct {
	cc grpc.ClientConnInterface
}

func NewPolygonProxyClient(cc grpc.ClientConnInterface) PolygonProxyClient {
	return &polygonProxyClient{cc}
}

func (c *polygonProxyClient) CreateWallet(ctx context.Context, in *polygon.CreateWalletInput, opts ...grpc.CallOption) (*polygon.CreateWalletOutput, error) {
	out := new(polygon.CreateWalletOutput)
	err := c.cc.Invoke(ctx, PolygonProxy_CreateWallet_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *polygonProxyClient) GetBalance(ctx context.Context, in *polygon.GetBalanceInput, opts ...grpc.CallOption) (*polygon.GetBalanceOutput, error) {
	out := new(polygon.GetBalanceOutput)
	err := c.cc.Invoke(ctx, PolygonProxy_GetBalance_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *polygonProxyClient) GetReceipt(ctx context.Context, in *polygon.GetReceiptInput, opts ...grpc.CallOption) (*polygon.GetReceiptOutput, error) {
	out := new(polygon.GetReceiptOutput)
	err := c.cc.Invoke(ctx, PolygonProxy_GetReceipt_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *polygonProxyClient) SendRawTransaction(ctx context.Context, in *polygon.SendRawTransactionInput, opts ...grpc.CallOption) (*polygon.SendRawTransactionOutput, error) {
	out := new(polygon.SendRawTransactionOutput)
	err := c.cc.Invoke(ctx, PolygonProxy_SendRawTransaction_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *polygonProxyClient) CreateRawTransaction(ctx context.Context, in *polygon.CreateRawTransactionInput, opts ...grpc.CallOption) (*polygon.CreateRawTransactionOutput, error) {
	out := new(polygon.CreateRawTransactionOutput)
	err := c.cc.Invoke(ctx, PolygonProxy_CreateRawTransaction_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *polygonProxyClient) GetBlockNumber(ctx context.Context, in *polygon.GetBlockNumberInput, opts ...grpc.CallOption) (*polygon.GetBlockNumberOutput, error) {
	out := new(polygon.GetBlockNumberOutput)
	err := c.cc.Invoke(ctx, PolygonProxy_GetBlockNumber_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *polygonProxyClient) GetBlocks(ctx context.Context, in *polygon.GetBlocksInput, opts ...grpc.CallOption) (*polygon.GetBlocksOutput, error) {
	out := new(polygon.GetBlocksOutput)
	err := c.cc.Invoke(ctx, PolygonProxy_GetBlocks_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PolygonProxyServer is the server API for PolygonProxy service.
// All implementations must embed UnimplementedPolygonProxyServer
// for forward compatibility
type PolygonProxyServer interface {
	CreateWallet(context.Context, *polygon.CreateWalletInput) (*polygon.CreateWalletOutput, error)
	GetBalance(context.Context, *polygon.GetBalanceInput) (*polygon.GetBalanceOutput, error)
	GetReceipt(context.Context, *polygon.GetReceiptInput) (*polygon.GetReceiptOutput, error)
	SendRawTransaction(context.Context, *polygon.SendRawTransactionInput) (*polygon.SendRawTransactionOutput, error)
	CreateRawTransaction(context.Context, *polygon.CreateRawTransactionInput) (*polygon.CreateRawTransactionOutput, error)
	GetBlockNumber(context.Context, *polygon.GetBlockNumberInput) (*polygon.GetBlockNumberOutput, error)
	GetBlocks(context.Context, *polygon.GetBlocksInput) (*polygon.GetBlocksOutput, error)
	mustEmbedUnimplementedPolygonProxyServer()
}

// UnimplementedPolygonProxyServer must be embedded to have forward compatible implementations.
type UnimplementedPolygonProxyServer struct {
}

func (UnimplementedPolygonProxyServer) CreateWallet(context.Context, *polygon.CreateWalletInput) (*polygon.CreateWalletOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateWallet not implemented")
}
func (UnimplementedPolygonProxyServer) GetBalance(context.Context, *polygon.GetBalanceInput) (*polygon.GetBalanceOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBalance not implemented")
}
func (UnimplementedPolygonProxyServer) GetReceipt(context.Context, *polygon.GetReceiptInput) (*polygon.GetReceiptOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetReceipt not implemented")
}
func (UnimplementedPolygonProxyServer) SendRawTransaction(context.Context, *polygon.SendRawTransactionInput) (*polygon.SendRawTransactionOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendRawTransaction not implemented")
}
func (UnimplementedPolygonProxyServer) CreateRawTransaction(context.Context, *polygon.CreateRawTransactionInput) (*polygon.CreateRawTransactionOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateRawTransaction not implemented")
}
func (UnimplementedPolygonProxyServer) GetBlockNumber(context.Context, *polygon.GetBlockNumberInput) (*polygon.GetBlockNumberOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBlockNumber not implemented")
}
func (UnimplementedPolygonProxyServer) GetBlocks(context.Context, *polygon.GetBlocksInput) (*polygon.GetBlocksOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBlocks not implemented")
}
func (UnimplementedPolygonProxyServer) mustEmbedUnimplementedPolygonProxyServer() {}

// UnsafePolygonProxyServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PolygonProxyServer will
// result in compilation errors.
type UnsafePolygonProxyServer interface {
	mustEmbedUnimplementedPolygonProxyServer()
}

func RegisterPolygonProxyServer(s grpc.ServiceRegistrar, srv PolygonProxyServer) {
	s.RegisterService(&PolygonProxy_ServiceDesc, srv)
}

func _PolygonProxy_CreateWallet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(polygon.CreateWalletInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PolygonProxyServer).CreateWallet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PolygonProxy_CreateWallet_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PolygonProxyServer).CreateWallet(ctx, req.(*polygon.CreateWalletInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _PolygonProxy_GetBalance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(polygon.GetBalanceInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PolygonProxyServer).GetBalance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PolygonProxy_GetBalance_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PolygonProxyServer).GetBalance(ctx, req.(*polygon.GetBalanceInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _PolygonProxy_GetReceipt_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(polygon.GetReceiptInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PolygonProxyServer).GetReceipt(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PolygonProxy_GetReceipt_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PolygonProxyServer).GetReceipt(ctx, req.(*polygon.GetReceiptInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _PolygonProxy_SendRawTransaction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(polygon.SendRawTransactionInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PolygonProxyServer).SendRawTransaction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PolygonProxy_SendRawTransaction_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PolygonProxyServer).SendRawTransaction(ctx, req.(*polygon.SendRawTransactionInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _PolygonProxy_CreateRawTransaction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(polygon.CreateRawTransactionInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PolygonProxyServer).CreateRawTransaction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PolygonProxy_CreateRawTransaction_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PolygonProxyServer).CreateRawTransaction(ctx, req.(*polygon.CreateRawTransactionInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _PolygonProxy_GetBlockNumber_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(polygon.GetBlockNumberInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PolygonProxyServer).GetBlockNumber(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PolygonProxy_GetBlockNumber_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PolygonProxyServer).GetBlockNumber(ctx, req.(*polygon.GetBlockNumberInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _PolygonProxy_GetBlocks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(polygon.GetBlocksInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PolygonProxyServer).GetBlocks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PolygonProxy_GetBlocks_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PolygonProxyServer).GetBlocks(ctx, req.(*polygon.GetBlocksInput))
	}
	return interceptor(ctx, in, info, handler)
}

// PolygonProxy_ServiceDesc is the grpc.ServiceDesc for PolygonProxy service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PolygonProxy_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proxy.PolygonProxy",
	HandlerType: (*PolygonProxyServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateWallet",
			Handler:    _PolygonProxy_CreateWallet_Handler,
		},
		{
			MethodName: "GetBalance",
			Handler:    _PolygonProxy_GetBalance_Handler,
		},
		{
			MethodName: "GetReceipt",
			Handler:    _PolygonProxy_GetReceipt_Handler,
		},
		{
			MethodName: "SendRawTransaction",
			Handler:    _PolygonProxy_SendRawTransaction_Handler,
		},
		{
			MethodName: "CreateRawTransaction",
			Handler:    _PolygonProxy_CreateRawTransaction_Handler,
		},
		{
			MethodName: "GetBlockNumber",
			Handler:    _PolygonProxy_GetBlockNumber_Handler,
		},
		{
			MethodName: "GetBlocks",
			Handler:    _PolygonProxy_GetBlocks_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/proxy/proxy.proto",
}

const (
	EthereumProxy_CreateWallet_FullMethodName         = "/proxy.EthereumProxy/CreateWallet"
	EthereumProxy_GetReceipt_FullMethodName           = "/proxy.EthereumProxy/GetReceipt"
	EthereumProxy_GetBalance_FullMethodName           = "/proxy.EthereumProxy/GetBalance"
	EthereumProxy_SendRawTransaction_FullMethodName   = "/proxy.EthereumProxy/SendRawTransaction"
	EthereumProxy_CreateRawTransaction_FullMethodName = "/proxy.EthereumProxy/CreateRawTransaction"
	EthereumProxy_GetBlockNumber_FullMethodName       = "/proxy.EthereumProxy/GetBlockNumber"
	EthereumProxy_GetBlocks_FullMethodName            = "/proxy.EthereumProxy/GetBlocks"
)

// EthereumProxyClient is the client API for EthereumProxy service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type EthereumProxyClient interface {
	CreateWallet(ctx context.Context, in *ethereum.CreateWalletInput, opts ...grpc.CallOption) (*ethereum.CreateWalletOutput, error)
	GetReceipt(ctx context.Context, in *ethereum.GetReceiptInput, opts ...grpc.CallOption) (*ethereum.GetReceiptOutput, error)
	GetBalance(ctx context.Context, in *ethereum.GetBalanceInput, opts ...grpc.CallOption) (*ethereum.GetBalanceOutput, error)
	SendRawTransaction(ctx context.Context, in *ethereum.SendRawTransactionInput, opts ...grpc.CallOption) (*ethereum.SendRawTransactionOutput, error)
	CreateRawTransaction(ctx context.Context, in *ethereum.CreateRawTransactionInput, opts ...grpc.CallOption) (*ethereum.CreateRawTransactionOutput, error)
	GetBlockNumber(ctx context.Context, in *ethereum.GetBlockNumberInput, opts ...grpc.CallOption) (*ethereum.GetBlockNumberOutput, error)
	GetBlocks(ctx context.Context, in *ethereum.GetBlocksInput, opts ...grpc.CallOption) (*ethereum.GetBlocksOutput, error)
}

type ethereumProxyClient struct {
	cc grpc.ClientConnInterface
}

func NewEthereumProxyClient(cc grpc.ClientConnInterface) EthereumProxyClient {
	return &ethereumProxyClient{cc}
}

func (c *ethereumProxyClient) CreateWallet(ctx context.Context, in *ethereum.CreateWalletInput, opts ...grpc.CallOption) (*ethereum.CreateWalletOutput, error) {
	out := new(ethereum.CreateWalletOutput)
	err := c.cc.Invoke(ctx, EthereumProxy_CreateWallet_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ethereumProxyClient) GetReceipt(ctx context.Context, in *ethereum.GetReceiptInput, opts ...grpc.CallOption) (*ethereum.GetReceiptOutput, error) {
	out := new(ethereum.GetReceiptOutput)
	err := c.cc.Invoke(ctx, EthereumProxy_GetReceipt_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ethereumProxyClient) GetBalance(ctx context.Context, in *ethereum.GetBalanceInput, opts ...grpc.CallOption) (*ethereum.GetBalanceOutput, error) {
	out := new(ethereum.GetBalanceOutput)
	err := c.cc.Invoke(ctx, EthereumProxy_GetBalance_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ethereumProxyClient) SendRawTransaction(ctx context.Context, in *ethereum.SendRawTransactionInput, opts ...grpc.CallOption) (*ethereum.SendRawTransactionOutput, error) {
	out := new(ethereum.SendRawTransactionOutput)
	err := c.cc.Invoke(ctx, EthereumProxy_SendRawTransaction_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ethereumProxyClient) CreateRawTransaction(ctx context.Context, in *ethereum.CreateRawTransactionInput, opts ...grpc.CallOption) (*ethereum.CreateRawTransactionOutput, error) {
	out := new(ethereum.CreateRawTransactionOutput)
	err := c.cc.Invoke(ctx, EthereumProxy_CreateRawTransaction_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ethereumProxyClient) GetBlockNumber(ctx context.Context, in *ethereum.GetBlockNumberInput, opts ...grpc.CallOption) (*ethereum.GetBlockNumberOutput, error) {
	out := new(ethereum.GetBlockNumberOutput)
	err := c.cc.Invoke(ctx, EthereumProxy_GetBlockNumber_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ethereumProxyClient) GetBlocks(ctx context.Context, in *ethereum.GetBlocksInput, opts ...grpc.CallOption) (*ethereum.GetBlocksOutput, error) {
	out := new(ethereum.GetBlocksOutput)
	err := c.cc.Invoke(ctx, EthereumProxy_GetBlocks_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// EthereumProxyServer is the server API for EthereumProxy service.
// All implementations must embed UnimplementedEthereumProxyServer
// for forward compatibility
type EthereumProxyServer interface {
	CreateWallet(context.Context, *ethereum.CreateWalletInput) (*ethereum.CreateWalletOutput, error)
	GetReceipt(context.Context, *ethereum.GetReceiptInput) (*ethereum.GetReceiptOutput, error)
	GetBalance(context.Context, *ethereum.GetBalanceInput) (*ethereum.GetBalanceOutput, error)
	SendRawTransaction(context.Context, *ethereum.SendRawTransactionInput) (*ethereum.SendRawTransactionOutput, error)
	CreateRawTransaction(context.Context, *ethereum.CreateRawTransactionInput) (*ethereum.CreateRawTransactionOutput, error)
	GetBlockNumber(context.Context, *ethereum.GetBlockNumberInput) (*ethereum.GetBlockNumberOutput, error)
	GetBlocks(context.Context, *ethereum.GetBlocksInput) (*ethereum.GetBlocksOutput, error)
	mustEmbedUnimplementedEthereumProxyServer()
}

// UnimplementedEthereumProxyServer must be embedded to have forward compatible implementations.
type UnimplementedEthereumProxyServer struct {
}

func (UnimplementedEthereumProxyServer) CreateWallet(context.Context, *ethereum.CreateWalletInput) (*ethereum.CreateWalletOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateWallet not implemented")
}
func (UnimplementedEthereumProxyServer) GetReceipt(context.Context, *ethereum.GetReceiptInput) (*ethereum.GetReceiptOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetReceipt not implemented")
}
func (UnimplementedEthereumProxyServer) GetBalance(context.Context, *ethereum.GetBalanceInput) (*ethereum.GetBalanceOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBalance not implemented")
}
func (UnimplementedEthereumProxyServer) SendRawTransaction(context.Context, *ethereum.SendRawTransactionInput) (*ethereum.SendRawTransactionOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendRawTransaction not implemented")
}
func (UnimplementedEthereumProxyServer) CreateRawTransaction(context.Context, *ethereum.CreateRawTransactionInput) (*ethereum.CreateRawTransactionOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateRawTransaction not implemented")
}
func (UnimplementedEthereumProxyServer) GetBlockNumber(context.Context, *ethereum.GetBlockNumberInput) (*ethereum.GetBlockNumberOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBlockNumber not implemented")
}
func (UnimplementedEthereumProxyServer) GetBlocks(context.Context, *ethereum.GetBlocksInput) (*ethereum.GetBlocksOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBlocks not implemented")
}
func (UnimplementedEthereumProxyServer) mustEmbedUnimplementedEthereumProxyServer() {}

// UnsafeEthereumProxyServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to EthereumProxyServer will
// result in compilation errors.
type UnsafeEthereumProxyServer interface {
	mustEmbedUnimplementedEthereumProxyServer()
}

func RegisterEthereumProxyServer(s grpc.ServiceRegistrar, srv EthereumProxyServer) {
	s.RegisterService(&EthereumProxy_ServiceDesc, srv)
}

func _EthereumProxy_CreateWallet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ethereum.CreateWalletInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EthereumProxyServer).CreateWallet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EthereumProxy_CreateWallet_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EthereumProxyServer).CreateWallet(ctx, req.(*ethereum.CreateWalletInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _EthereumProxy_GetReceipt_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ethereum.GetReceiptInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EthereumProxyServer).GetReceipt(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EthereumProxy_GetReceipt_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EthereumProxyServer).GetReceipt(ctx, req.(*ethereum.GetReceiptInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _EthereumProxy_GetBalance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ethereum.GetBalanceInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EthereumProxyServer).GetBalance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EthereumProxy_GetBalance_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EthereumProxyServer).GetBalance(ctx, req.(*ethereum.GetBalanceInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _EthereumProxy_SendRawTransaction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ethereum.SendRawTransactionInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EthereumProxyServer).SendRawTransaction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EthereumProxy_SendRawTransaction_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EthereumProxyServer).SendRawTransaction(ctx, req.(*ethereum.SendRawTransactionInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _EthereumProxy_CreateRawTransaction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ethereum.CreateRawTransactionInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EthereumProxyServer).CreateRawTransaction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EthereumProxy_CreateRawTransaction_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EthereumProxyServer).CreateRawTransaction(ctx, req.(*ethereum.CreateRawTransactionInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _EthereumProxy_GetBlockNumber_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ethereum.GetBlockNumberInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EthereumProxyServer).GetBlockNumber(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EthereumProxy_GetBlockNumber_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EthereumProxyServer).GetBlockNumber(ctx, req.(*ethereum.GetBlockNumberInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _EthereumProxy_GetBlocks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ethereum.GetBlocksInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EthereumProxyServer).GetBlocks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EthereumProxy_GetBlocks_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EthereumProxyServer).GetBlocks(ctx, req.(*ethereum.GetBlocksInput))
	}
	return interceptor(ctx, in, info, handler)
}

// EthereumProxy_ServiceDesc is the grpc.ServiceDesc for EthereumProxy service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var EthereumProxy_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proxy.EthereumProxy",
	HandlerType: (*EthereumProxyServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateWallet",
			Handler:    _EthereumProxy_CreateWallet_Handler,
		},
		{
			MethodName: "GetReceipt",
			Handler:    _EthereumProxy_GetReceipt_Handler,
		},
		{
			MethodName: "GetBalance",
			Handler:    _EthereumProxy_GetBalance_Handler,
		},
		{
			MethodName: "SendRawTransaction",
			Handler:    _EthereumProxy_SendRawTransaction_Handler,
		},
		{
			MethodName: "CreateRawTransaction",
			Handler:    _EthereumProxy_CreateRawTransaction_Handler,
		},
		{
			MethodName: "GetBlockNumber",
			Handler:    _EthereumProxy_GetBlockNumber_Handler,
		},
		{
			MethodName: "GetBlocks",
			Handler:    _EthereumProxy_GetBlocks_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/proxy/proxy.proto",
}
