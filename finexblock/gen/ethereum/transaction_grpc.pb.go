// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.23.3
// source: proto/ethereum/transaction.proto

package ethereum

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Transaction_GetReceipt_FullMethodName           = "/ethereum.Transaction/GetReceipt"
	Transaction_SendRawTransaction_FullMethodName   = "/ethereum.Transaction/SendRawTransaction"
	Transaction_CreateRawTransaction_FullMethodName = "/ethereum.Transaction/CreateRawTransaction"
	Transaction_GetBlockNumber_FullMethodName       = "/ethereum.Transaction/GetBlockNumber"
	Transaction_GetBlocks_FullMethodName            = "/ethereum.Transaction/GetBlocks"
)

// TransactionClient is the client API for Transaction service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TransactionClient interface {
	GetReceipt(ctx context.Context, in *GetReceiptInput, opts ...grpc.CallOption) (*GetReceiptOutput, error)
	SendRawTransaction(ctx context.Context, in *SendRawTransactionInput, opts ...grpc.CallOption) (*SendRawTransactionOutput, error)
	CreateRawTransaction(ctx context.Context, in *CreateRawTransactionInput, opts ...grpc.CallOption) (*CreateRawTransactionOutput, error)
	GetBlockNumber(ctx context.Context, in *GetBlockNumberInput, opts ...grpc.CallOption) (*GetBlockNumberOutput, error)
	GetBlocks(ctx context.Context, in *GetBlocksInput, opts ...grpc.CallOption) (*GetBlocksOutput, error)
}

type transactionClient struct {
	cc grpc.ClientConnInterface
}

func NewTransactionClient(cc grpc.ClientConnInterface) TransactionClient {
	return &transactionClient{cc}
}

func (c *transactionClient) GetReceipt(ctx context.Context, in *GetReceiptInput, opts ...grpc.CallOption) (*GetReceiptOutput, error) {
	out := new(GetReceiptOutput)
	err := c.cc.Invoke(ctx, Transaction_GetReceipt_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *transactionClient) SendRawTransaction(ctx context.Context, in *SendRawTransactionInput, opts ...grpc.CallOption) (*SendRawTransactionOutput, error) {
	out := new(SendRawTransactionOutput)
	err := c.cc.Invoke(ctx, Transaction_SendRawTransaction_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *transactionClient) CreateRawTransaction(ctx context.Context, in *CreateRawTransactionInput, opts ...grpc.CallOption) (*CreateRawTransactionOutput, error) {
	out := new(CreateRawTransactionOutput)
	err := c.cc.Invoke(ctx, Transaction_CreateRawTransaction_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *transactionClient) GetBlockNumber(ctx context.Context, in *GetBlockNumberInput, opts ...grpc.CallOption) (*GetBlockNumberOutput, error) {
	out := new(GetBlockNumberOutput)
	err := c.cc.Invoke(ctx, Transaction_GetBlockNumber_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *transactionClient) GetBlocks(ctx context.Context, in *GetBlocksInput, opts ...grpc.CallOption) (*GetBlocksOutput, error) {
	out := new(GetBlocksOutput)
	err := c.cc.Invoke(ctx, Transaction_GetBlocks_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TransactionServer is the server API for Transaction service.
// All implementations must embed UnimplementedTransactionServer
// for forward compatibility
type TransactionServer interface {
	GetReceipt(context.Context, *GetReceiptInput) (*GetReceiptOutput, error)
	SendRawTransaction(context.Context, *SendRawTransactionInput) (*SendRawTransactionOutput, error)
	CreateRawTransaction(context.Context, *CreateRawTransactionInput) (*CreateRawTransactionOutput, error)
	GetBlockNumber(context.Context, *GetBlockNumberInput) (*GetBlockNumberOutput, error)
	GetBlocks(context.Context, *GetBlocksInput) (*GetBlocksOutput, error)
	mustEmbedUnimplementedTransactionServer()
}

// UnimplementedTransactionServer must be embedded to have forward compatible implementations.
type UnimplementedTransactionServer struct {
}

func (UnimplementedTransactionServer) GetReceipt(context.Context, *GetReceiptInput) (*GetReceiptOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetReceipt not implemented")
}
func (UnimplementedTransactionServer) SendRawTransaction(context.Context, *SendRawTransactionInput) (*SendRawTransactionOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendRawTransaction not implemented")
}
func (UnimplementedTransactionServer) CreateRawTransaction(context.Context, *CreateRawTransactionInput) (*CreateRawTransactionOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateRawTransaction not implemented")
}
func (UnimplementedTransactionServer) GetBlockNumber(context.Context, *GetBlockNumberInput) (*GetBlockNumberOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBlockNumber not implemented")
}
func (UnimplementedTransactionServer) GetBlocks(context.Context, *GetBlocksInput) (*GetBlocksOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBlocks not implemented")
}
func (UnimplementedTransactionServer) mustEmbedUnimplementedTransactionServer() {}

// UnsafeTransactionServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TransactionServer will
// result in compilation errors.
type UnsafeTransactionServer interface {
	mustEmbedUnimplementedTransactionServer()
}

func RegisterTransactionServer(s grpc.ServiceRegistrar, srv TransactionServer) {
	s.RegisterService(&Transaction_ServiceDesc, srv)
}

func _Transaction_GetReceipt_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetReceiptInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransactionServer).GetReceipt(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Transaction_GetReceipt_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransactionServer).GetReceipt(ctx, req.(*GetReceiptInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _Transaction_SendRawTransaction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendRawTransactionInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransactionServer).SendRawTransaction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Transaction_SendRawTransaction_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransactionServer).SendRawTransaction(ctx, req.(*SendRawTransactionInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _Transaction_CreateRawTransaction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateRawTransactionInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransactionServer).CreateRawTransaction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Transaction_CreateRawTransaction_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransactionServer).CreateRawTransaction(ctx, req.(*CreateRawTransactionInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _Transaction_GetBlockNumber_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBlockNumberInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransactionServer).GetBlockNumber(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Transaction_GetBlockNumber_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransactionServer).GetBlockNumber(ctx, req.(*GetBlockNumberInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _Transaction_GetBlocks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBlocksInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransactionServer).GetBlocks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Transaction_GetBlocks_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransactionServer).GetBlocks(ctx, req.(*GetBlocksInput))
	}
	return interceptor(ctx, in, info, handler)
}

// Transaction_ServiceDesc is the grpc.ServiceDesc for Transaction service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Transaction_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "ethereum.Transaction",
	HandlerType: (*TransactionServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetReceipt",
			Handler:    _Transaction_GetReceipt_Handler,
		},
		{
			MethodName: "SendRawTransaction",
			Handler:    _Transaction_SendRawTransaction_Handler,
		},
		{
			MethodName: "CreateRawTransaction",
			Handler:    _Transaction_CreateRawTransaction_Handler,
		},
		{
			MethodName: "GetBlockNumber",
			Handler:    _Transaction_GetBlockNumber_Handler,
		},
		{
			MethodName: "GetBlocks",
			Handler:    _Transaction_GetBlocks_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/ethereum/transaction.proto",
}
