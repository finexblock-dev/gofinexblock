syntax = "proto3";
package bitcoin;
option go_package = "./bitcoin";

message BlockHeader {
  int32 Version = 1 [json_name = "version"];
  string PrevBlock = 2 [json_name = "prev_block"];
  string MerkleRoot = 3 [json_name = "merkle_root"];
  int64 Timestamp = 4 [json_name = "timestamp"];
  uint32 Bits = 5 [json_name = "bits"];
  uint32 Nonce = 6 [json_name = "nonce"];
}

message BlockOutPoint {
  string Hash = 1 [json_name = "hash"];
  uint32 Index = 2 [json_name = "index"];
}

message BlockTransactionInput {
  BlockOutPoint PreviousOutpoint = 1 [json_name = "previous_outpoint"];
  string SignatureScript = 2 [json_name = "signature_script"];
  uint32 Sequence = 3 [json_name = "sequence"];
}

message BlockTransactionOutput {
  int64 Value = 1 [json_name = "value"];
  string ScriptPubKey = 2 [json_name = "script_pub_key"];
}

message BlockTransaction {
  string TxHash = 1 [json_name = "tx_hash"];
  repeated BlockTransactionInput TxInputs = 2 [json_name = "tx_inputs"];
  repeated BlockTransactionOutput TxOuts = 3 [json_name = "tx_outs"];
}

message GetBlockCountRequest {}

message GetBlockCountResponse {
  int64 Count = 1 [json_name = "count"];
}

message GetBlockHashRequest {
  int64 Height = 1 [json_name = "height"];
}

message GetBlockHashResponse {
  string BlockHash = 1 [json_name = "block_hash"];
}

message GetBlockRequest {
  string BlockHash = 1 [json_name = "block_hash"];
}

message GetBlockResponse {
  BlockHeader header = 1 [json_name = "header"];
  repeated BlockTransaction tx = 2 [json_name = "tx"];
}