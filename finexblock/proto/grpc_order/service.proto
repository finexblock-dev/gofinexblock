syntax = "proto3";
package grpc_order;
option go_package = "./grpc_order";

import "proto/grpc_order/message.proto";

service MarketOrder {
  rpc MarketOrderInit(MarketOrderInput) returns (Ack);
}

service LimitOrder {
  rpc LimitOrderInit(LimitOrderInput) returns (Ack);
}

service CancelOrder {
  rpc CancelOrder(OrderCancellation) returns (Ack);
}


service Event {
  rpc OrderPlacementEvent(OrderPlacement) returns (Ack);
  rpc OrderPlacementFailedEvent(OrderPlacementFailed) returns (Ack);
  rpc OrderCancellationEvent(OrderCancelled) returns (Ack);
  rpc OrderCancellationFailedEvent(OrderCancellationFailed) returns (Ack);
  rpc OrderMatchingEvent (OrderMatching) returns (Ack);
  rpc OrderMatchingFailedEvent (OrderMatchingFailed) returns (Ack);
  rpc OrderPartialFillEvent (OrderPartialFill) returns (Ack);
  rpc OrderFulfillmentEvent (OrderFulfillment) returns (Ack);
  rpc OrderInitializeEvent (OrderInitialize) returns (Ack);
  rpc BalanceUpdateEvent (BalanceUpdate) returns (Ack);
  rpc MarketOrderMatchingEvent (MarketOrderMatching) returns (Ack);
}

service OrderBook {
  rpc GetOrderBook(GetOrderBookInput) returns(GetOrderBookOutput);
}

service PlacementProcess {
  rpc Placement(Order) returns (Ack);
}

service RefundProcess {
  rpc MarketAskRefund(Order) returns (Ack);
  rpc MarketBidRefund(Order) returns (Ack);
  rpc LimitAskRefund(Order) returns (Ack);
  rpc LimitBidRefund(Order) returns (Ack);
}

service MatchProcess {
  rpc LimitBidBigger(BidAsk) returns (Ack);
  rpc LimitBidEqual(BidAsk) returns (Ack);
  rpc LimitBidSmaller(BidAsk) returns (Ack);
  rpc MarketBidBigger(BidAsk) returns (Ack);
  rpc MarketBidEqual(BidAsk) returns (Ack);
  rpc MarketBidSmaller(BidAsk) returns (Ack);
  rpc LimitAskBigger(BidAsk) returns (Ack);
  rpc LimitAskEqual(BidAsk) returns (Ack);
  rpc LimitAskSmaller(BidAsk) returns (Ack);
  rpc MarketAskBigger(BidAsk) returns (Ack);
  rpc MarketAskEqual(BidAsk) returns (Ack);
  rpc MarketAskSmaller(BidAsk) returns (Ack);
}

service ErrorProcess {
  rpc Error(ErrorInput) returns(Ack);
}